<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" dir="ltr"
 lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta name="KEYWORDS" content="Most ingenious puzzle solution">
  <meta name="robots" content="index,follow">
  <link rel="shortcut icon" href="/favicon.ico">
  <title>Most ingenious puzzle solution</title>
  <style type="text/css" media="screen,projection">/*<![CDATA[*/ @import "/skins/monobook/main.css"; /*]]>*/</style>
  <link rel="stylesheet" type="text/css"
 href="/skins/common/commonPrint.css">
<!--[if lt IE 5.5000]><style type="text/css">@import "/skins/monobook/IE50Fixes.css";</style><![endif]--><!--[if IE 5.5000]><style type="text/css">@import "/skins/monobook/IE55Fixes.css";</style><![endif]--><!--[if gte IE 6]><style type="text/css">@import "/skins/monobook/IE60Fixes.css";</style><![endif]--><!--[if IE]><script type="text/javascript" src="/skins/common/IEFixes.js"></script>
    <meta http-equiv="imagetoolbar" content="no" /><![endif]-->
  <script type="text/javascript"
 src="/index.php?title=-&amp;action=raw&amp;gen=js"></script>
  <script type="text/javascript" src="/skins/common/wikibits.js"></script>
  <style type="text/css">/*<![CDATA[*/
@import "/index.php?title=MediaWiki:Monobook.css&action=raw&ctype=text/css&smaxage=18000";
@import "/index.php?title=-&action=raw&gen=css&maxage=18000";
/*]]>*/</style>
</head>
<body class="ns-0">
<div id="globalWrapper">
<div id="column-content">
<div id="content"> <a name="top" id="top"></a>
<h1 class="firstHeading">Most ingenious puzzle solution</h1>
<div id="bodyContent">
<!-- start content -->
<p>Aidan Thornton
</p>
<pre>  United Kingdom<br></pre>
<pre>  makomk@lycos.co.uk<br></pre>
<table style="width: 330px; height: 397px;" id="toc" class="toc">
  <tbody>
    <tr>
      <td>
      <div id="toctitle">
      <h2>Contents</h2>
      </div>
      <ul>
        <li class="toclevel-1"><a href="#Judges.27_comments"><span
 class="tocnumber">1</span> <span class="toctext">Judges' comments</span></a>
          <ul>
            <li class="toclevel-2"><a href="#To_build"><span
 class="tocnumber">1.1</span> <span class="toctext">To build</span></a></li>
          </ul>
        </li>
        <li class="toclevel-1"><a href="#Author.27s_comments"><span
 class="tocnumber">2</span> <span class="toctext">Author's comments</span></a>
          <ul>
            <li class="toclevel-2"><a href="#Contents"><span
 class="tocnumber">2.1</span> <span class="toctext">Contents</span></a></li>
            <li class="toclevel-2"><a href="#Legal_blurb"><span
 class="tocnumber">2.2</span> <span class="toctext">Legal blurb</span></a></li>
            <li class="toclevel-2"><a href="#What_is_a_sudoku.3F"><span
 class="tocnumber">2.3</span> <span class="toctext">What is a sudoku?</span></a></li>
            <li class="toclevel-2"><a href="#Usage"><span
 class="tocnumber">2.4</span> <span class="toctext">Usage</span></a>
              <ul>
                <li class="toclevel-3"><a href="#Building"><span
 class="tocnumber">2.4.1</span> <span class="toctext">Building</span></a></li>
                <li class="toclevel-3"><a href="#Testing_.28optional.29"><span
 class="tocnumber">2.4.2</span> <span class="toctext">Testing
(optional)</span></a></li>
                <li class="toclevel-3"><a href="#Solving"><span
 class="tocnumber">2.4.3</span> <span class="toctext">Solving</span></a></li>
                <li class="toclevel-3"><a href="#Generating"><span
 class="tocnumber">2.4.4</span> <span class="toctext">Generating</span></a></li>
              </ul>
            </li>
            <li class="toclevel-2"><a href="#Speed"><span
 class="tocnumber">2.5</span> <span class="toctext">Speed</span></a></li>
            <li class="toclevel-2"><a href="#Bugs"><span
 class="tocnumber">2.6</span> <span class="toctext">Bugs</span></a></li>
            <li class="toclevel-2"><a href="#Missing_Features"><span
 class="tocnumber">2.7</span> <span class="toctext">Missing Features</span></a></li>
            <li class="toclevel-2"><a href="#Portability"><span
 class="tocnumber">2.8</span> <span class="toctext">Portability</span></a></li>
            <li class="toclevel-2"><a href="#Compiler_warnings"><span
 class="tocnumber">2.9</span> <span class="toctext">Compiler warnings</span></a></li>
            <li class="toclevel-2"><a href="#Obfuscation"><span
 class="tocnumber">2.10</span> <span class="toctext">Obfuscation</span></a></li>
          </ul>
        </li>
      </ul>
      </td>
    </tr>
  </tbody>
</table>
<p>
<script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script></p>
<a name="Judges.27_comments"></a>
<h2>Judges' comments</h2>
<br>
<a name="To_build"></a>
<h3>To build</h3>
<pre>  cc -O2 -o aidan aidan.c<br></pre>
<a name="Author.27s_comments"></a>
<h2>Author's comments</h2>
<p>This program can solve a type of logic puzzle known as a Sudoku, and
also generate new ones. (Apparently, the puzzle is known as Number
Place in the US, but we in the UK got it via Japan, where it's quite
common in magazines, etc. These things happen sometimes.)
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Contents"></a>
<h3>Contents</h3>
<p>build file: build.txt - you don't need this
program file: sudoku-sf.c - sudoku solver and generator
remarks file: sudoku-sf.txt - this file
info file: test-su.perl - optional test script (written for Perl5)
info file: eg-sudoku.tar - various assorted example sudokus
</p>
<p><b>XXX - now the tar file includes the test script and the examples</b>
</p>
<p>Yes, the test suite really is 5 times larger than the actual
program. You *did* say this was a parody of the software development
process...
</p>
<pre>  <b> IMPORTANT! </b><br>  test.perl expects the sudoku-sf executable to be "./sudoku-sf". If you<br>  rename it, please change the definition of $sf_exe to the new name<br>  <b> IMPORTANT! </b>
</pre>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Legal_blurb"></a>
<h3>Legal blurb</h3>
<p>This program comes with NO WARRANTY, not even that it'll do what I
say
it should. Any misfortunes that occur as a result of using this are not
my fault. Go find some unpopular multinational to sue instead.
</p>
<p>This program is not copyrighted and is entirely my work. Distribute
or
modify it as you wish, though please give me credit.
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="What_is_a_sudoku.3F"></a>
<h3>What is a sudoku?</h3>
<p>(If you know, feel free to skip this section. See also
&lt;<a href="http://en.wikipedia.org/wiki/Sudoku" class="external free"
 title="http://en.wikipedia.org/wiki/Sudoku" rel="nofollow">http://en.wikipedia.org/wiki/Sudoku</a>&gt;
for more info.)
</p>
<p>A sudoku is a type of logic puzzle. You are given a grid of 9x9
boxes, some of which contain digits. This is divided into nine 3x3
boxes, e.g. (from the Wikipedia article - fairly easy):
</p>
<pre>. . . | 1 . . | 7 4 .<br>. 5 . | . 9 . | . 3 2<br>. . 6 | 7 . . | 9 . .<br>------+-------+------<br>4 . . | 8 . . | . . .<br>. 2 . | . . . | . 1 .<br>. . . | . . 9 | . . 5<br>------+-------+------<br>. . 4 | . . 7 | 3 . .<br>7 3 . | . 2 . | . 6 .<br>. 6 5 | . . 4 | . . .<br></pre>
<p>You have to fill in the remaining boxes so that each row, column,
and
smaller box contains all of the digits 1-9. That's all the information
I needed to figure out how to solve them, but there's a useful
tutorial on &lt;<a href="http://www.sudoku.org.uk/"
 class="external free" title="http://www.sudoku.org.uk/" rel="nofollow">http://www.sudoku.org.uk/</a>&gt;,
which is roughly affiliated
with the Daily Telegraph (a UK newspaper).
</p>
<p>Now, with modern computers this *can* be solved using brute force,
e.g.:
</p>
<pre>   #include &lt;stdio.h&gt; /* sudoku-bfi.c */<br>   #define S(t) for(n=0;n&lt;9;v[n++]=0);for(n=0;n&lt;81;n++)if(i[n]){z=1&lt;&lt;i[n];if(v[t]\<br>   &amp;z)for(;;){if(p&lt;0)goto d;if(i[p]++&lt;9)goto f;i[p]=0;p=s[p];}v[t]|=z;}<br>   int i[82],s[81],v[9],n,p,z;int main(void){for(n=0;n&lt;81;){p=getchar()^48;if(p==<br>   30)p=0;if(p&lt;10)i[n++]=p;}i[81]=0;p=-1;f:S(n%9)S(n/9)S(n%9/3+n/27*3)if(p&gt;80)goto<br>   d;for(n=p;i[++p];);s[p]=n;i[p]=1;goto f;d:z=p&lt;81;printf("\n%s!\n\n",z?"Fail":<br>   "Success");for(n=0;n&lt;81;){p=i[n];printf("%c %s",(p?p|48:'.'),(++n%3?"":n%9?"| "<br>   :n%27?"\n":n%81?"\n------+-------+------\n":"\n\n"));}return z;}<br></pre>
<p>That isn't the approach I've used; it's slow (particularly in
worst-case or nearly so scenarios), inelegant, and not a good starting
point for sudoku generation. It's also much too easy to
understand&nbsp;;-)
Instead, I've written a program which solves them in much the same way
as I do, only a lot faster (and hopefully more reliably).
</p>
<p>Oh, and if you think that example sudoku is too easy, try this one
(which my program generated):
</p>
<pre>--- insane1.sudoku --<br>. . 4 | . . . | . 5 6<br>5 . . | . 7 2 | . . .<br>. . 1 | . . . | 8 . .<br>------+-------+------<br>. . . | . . . | . . .<br>. . . | 6 9 3 | . . 5<br>. . . | . . . | 7 3 4<br>------+-------+------<br>. 5 . | 2 . 1 | 4 . 8<br>3 . . | . . . | . . .<br>. . . | . . . | . 6 1<br></pre>
<p>Be warned - it's evil! (I certainly haven't been able to solve it by
hand. The brute-force program given above, sudoku-bfi.c, also has
trouble - it took 66 seconds to solve it - but probably for different
reasons. That's the worst performance I've had from brute-force so
far!)
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Usage"></a>
<h3>Usage</h3>
<p><br>
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Building"></a>
<h4>Building</h4>
<pre>   cc -o sudoku-bf sudoku-bf.c<br></pre>
<p>-- or, if using gcc, try --
</p>
<pre>  gcc -O2 -Wall -Wextra -ansi -pedantic-errors -o sudoku-sf sudoku-sf.c<br></pre>
<p>-- or, if using gcc and feeling lazy --
</p>
<pre>  sh build.txt<br></pre>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Testing_.28optional.29"></a>
<h4>Testing (optional)</h4>
<pre>  perl ./test-su.perl<br></pre>
<p>Note that this requires Perl 5 (I use 5.8.5, earlier versions
untested) and is somewhat slow (should take under a minute on a fairly
modern PC - try appending "-n 0" if you're in a hurry). I wrote it
mostly for my own benefit, really.
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Solving"></a>
<h4>Solving</h4>
<pre>  ./sudoku-sf &lt; somefile.txt<br></pre>
<p>Input should be the numbers of each row in turn. Empty spaces can be
represented as a period (.) or zero (0). Other characters are ignored,
so you can cut-and-paste either example sudoku from above into a file
and feed that in. The program has coped with every input I've thrown
at it so far, including an empty grid.
</p>
<p>Output consists of the problem, then the solution, then a message of
success/failure.
</p>
<p>"./sudoku-sf U" (capital U), may also be useful, or perhaps not. It
only took an extra 15 bytes of (very simple) code to add, so it
doesn't really matter to me. (It's the same as the normal mode for
most input you're likely to feed in, though slightly slower. See if
you can figure out what it does.)
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Generating"></a>
<h4>Generating</h4>
<pre>  ./sudoku &lt;seed&gt;<br></pre>
<p>Output is a blank grid, then the solution, then the problem. There's
no control over the difficulty. Sorry. However, all generated sudokus
should have exactly one solution - if one doesn't, that's a bug.
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Speed"></a>
<h3>Speed</h3>
<p>Fast enough. Solving and generating are practically
instant on my 1Ghz Duron. Of course, there could be some cases which
take longer...
</p>
<p>More precisely - 400 random sudokus are generated and solved in
about
45 seconds in tests on my PC (1Ghz Duron, gcc 3.4.1, -O2 optimisation
- takes about 60 seconds with no optimisation). If that isn't fast
enough, what on Earth are you doing with it?
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Bugs"></a>
<h3>Bugs</h3>
<p>None known - hopefully I've worked out all the major ones. Nothing
has come up in testing since the last bugfix, but what does that mean?
</p>
<p>Tested on:
</p>
<pre>- gcc 3.4.1-3mdk, Linux/x86<br>*RETEST* Borland C 4.5, 16-bit DOS .exe (small memory model)<br></pre>
<p>I don't count the fact that it first prints a blank grid whenever
asked to generate a sudoku as a bug - just a minor quirk. The fix is
slightly awkward and would make the program slightly longer, so I
haven't bothered - it's not important.
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Missing_Features"></a>
<h3>Missing Features</h3>
<ul>
  <li> No control over the difficulty of generated sudokus - they vary
from </li>
</ul>
<p>easy to hair-tugging near-impossibility. Solver beware. Seeing as
apparently one program took six years, I'm in no hurry.
&lt;<a href="http://news.bbc.co.uk/1/hi/magazine/4469719.stm"
 class="external free"
 title="http://news.bbc.co.uk/1/hi/magazine/4469719.stm" rel="nofollow">http://news.bbc.co.uk/1/hi/magazine/4469719.stm</a>&gt;
</p>
<ul>
  <li> Some sort of curses-based UI to let you solve interactively
might </li>
</ul>
<p>be cool, but I don't feel like learning curses just for
this. Besides, I spent enough of the time swearing as it is.
</p>
<ul>
  <li> If you mistype a sudoku (e.g. from a paper/magazine) - and you
will </li>
  <li> it can't help you figure out where the mistake is, sadly. </li>
</ul>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Portability"></a>
<h3>Portability</h3>
<p>Dependant on ASCII, requires that an int is at least 15 bits and a
long at least 32. (No, that isn't a typo - I did say 15, not 16).
</p>
<p>Also requires that cpp can properly handle something like:
</p>
<pre>  #define foo(x,y) x y<br>  foo(bar,)<br></pre>
<p>Apparently, a few can't (ANSI C specifically doesn't require that
this
works, though it usually does). Unfortunately, I didn't discover this
issue until too late. (It was mentioned in the notes for people
modifying GCC in the "beware of obscure compiler limitations" section,
so I'm figuring it's quite unusual.)
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Compiler_warnings"></a>
<h3>Compiler warnings</h3>
<p>Some when compiled with "gcc -Wall -Wextra -ansi -pedantic":
</p>
<ul>
  <li> The left-hand operand of a comma has no effect in two places </li>
  <li> Parentheses are suggested around a + in an operand of &amp; in
the "i" </li>
</ul>
<p>macro definition.
</p>
<p>Borland C also spots some code in expressions which has no effect,
and
some uses of '=' where you'd expect a comparison operator.
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Obfuscation"></a>
<h3>Obfuscation</h3>
<p>Let's see now:
</p>
<ul>
  <li> Squint-inducing variable naming </li>
</ul>
<ul>
  <li> Slightly odd #defines (which will be cleaned up by cpp + a code </li>
</ul>
<p>beautifier, but see the next item)
</p>
<ul>
  <li> No functions but main() - all code reuse via #defines, or by </li>
</ul>
<p>various other methods (usually somewhat icky ones). This wasn't
deliberate - it just ended up that way somehow...
</p>
<ul>
  <li> Gotos from everywhere to everywhere else </li>
</ul>
<ul>
  <li> A slightly... interesting switch statement. </li>
</ul>
<ul>
  <li> Generally odd flow of control (see above items) </li>
</ul>
<ul>
  <li> Plenty of bit-twiddling </li>
</ul>
<ul>
  <li> To save space, no 'A'-style char constants - hard-coded numbers
are </li>
</ul>
<p>used. (There's one, but it isn't used to make things *clearer*)
</p>
<ul>
  <li> array[index] notation, because: </li>
</ul>
<pre>  a) it's traditional<br>  b) take a look at how the s and N(I,l) macros are used<br></pre>
<ul>
  <li> various other little things not worth mentioning </li>
</ul>
<p>So basically, just what you'd normally expect in an IOCCC entry...
</p>
<!-- Saved in parser cache with key db141535435:pcache:idhash:1292-0!1!0!0!!en!2 and timestamp 20060219194136 --></div>
</div>
</div>
</div>
<!-- Served by infong241 in 0.23 secs. -->
</body>
</html>
