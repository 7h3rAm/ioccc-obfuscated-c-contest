<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" dir="ltr"
 lang="en">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta name="KEYWORDS" content="Best 2D puzzle">
  <meta name="robots" content="index,follow">
  <link rel="shortcut icon" href="/favicon.ico">
  <title>Best 2D puzzle</title>
  <style type="text/css" media="screen,projection">/*<![CDATA[*/ @import "/skins/monobook/main.css"; /*]]>*/</style>
  <link rel="stylesheet" type="text/css" media="print"
 href="/skins/common/commonPrint.css">
<!--[if lt IE 5.5000]><style type="text/css">@import "/skins/monobook/IE50Fixes.css";</style><![endif]--><!--[if IE 5.5000]><style type="text/css">@import "/skins/monobook/IE55Fixes.css";</style><![endif]--><!--[if gte IE 6]><style type="text/css">@import "/skins/monobook/IE60Fixes.css";</style><![endif]--><!--[if IE]><script type="text/javascript" src="/skins/common/IEFixes.js"></script>
    <meta http-equiv="imagetoolbar" content="no" /><![endif]-->
  <script type="text/javascript"
 src="/index.php?title=-&amp;action=raw&amp;gen=js"></script>
  <script type="text/javascript" src="/skins/common/wikibits.js"></script>
  <style type="text/css">/*<![CDATA[*/
@import "/index.php?title=MediaWiki:Monobook.css&action=raw&ctype=text/css&smaxage=18000";
@import "/index.php?title=-&action=raw&gen=css&maxage=18000";
/*]]>*/</style>
</head>
<body class="ns-0">
<div id="globalWrapper">
<div id="column-content">
<div id="content"> <a name="top" id="top"></a>
<h1 class="firstHeading">Best 2D puzzle</h1>
<div id="bodyContent">
<!-- start content -->
<p>Gil Dogon
</p>
<pre>  1 HaBeer Alley<br>  Jerusalem<br>  Israel<br></pre>
<pre>  gil_jade@netvision.net.il<br></pre>
<p><br>
</p>
<table style="width: 523px; height: 161px;" id="toc" class="toc">
  <tbody>
    <tr>
      <td>
      <div id="toctitle">
      <h2>Contents</h2>
      </div>
      <ul>
        <li class="toclevel-1"><a href="#Judges.27_comments"><span
 class="tocnumber">1</span> <span class="toctext">Judges' comments</span></a>
          <ul>
            <li class="toclevel-2"><a href="#To_build"><span
 class="tocnumber">1.1</span> <span class="toctext">To build</span></a></li>
            <li class="toclevel-2"><a href="#To_run"><span
 class="tocnumber">1.2</span> <span class="toctext">To run</span></a></li>
          </ul>
        </li>
        <li class="toclevel-1"><a href="#Author.27s_comments"><span
 class="tocnumber">2</span> <span class="toctext">Author's comments</span></a>
          <ul>
            <li class="toclevel-2"><a
 href="#So_what_do_we_have_here_.3F"><span class="tocnumber">2.1</span>
              <span class="toctext">So what do we have here&nbsp;?</span></a></li>
            <li class="toclevel-2"><a
 href="#Why_I_think_this_program_is_obfuscated."><span class="tocnumber">2.2</span>
              <span class="toctext">Why I think this program is
obfuscated.</span></a></li>
            <li class="toclevel-2"><a
 href="#Known_Bugs.2Fproblems.2Fwarnings.2Fportability_issues"><span
 class="tocnumber">2.3</span> <span class="toctext">Known
Bugs/problems/warnings/portability issues</span></a></li>
            <li class="toclevel-2"><a href="#Challenges"><span
 class="tocnumber">2.4</span> <span class="toctext">Challenges</span></a></li>
            <li class="toclevel-2"><a href="#Hint_for_the_challenges"><span
 class="tocnumber">2.5</span> <span class="toctext">Hint for the
challenges</span></a></li>
          </ul>
        </li>
      </ul>
      </td>
    </tr>
  </tbody>
</table>
<p>
<script type="text/javascript"> if (window.showTocToggle) { var tocShowText = "show"; var tocHideText = "hide"; showTocToggle(); } </script></p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Judges.27_comments"></a>
<h2>Judges' comments</h2>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="To_build"></a>
<h3>To build</h3>
<pre>  cc giljade.c -o giljade<br></pre>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="To_run"></a>
<h3>To run</h3>
<pre>  giljade &gt; out<br></pre>
<p>Open an xterm with 78 lines
</p>
<pre>  vi out<br></pre>
<p>Press ^F repeatedly
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Author.27s_comments"></a>
<h2>Author's comments</h2>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="So_what_do_we_have_here_.3F"></a>
<h3>So what do we have here&nbsp;?</h3>
<p><br>
Just run the executable with no command line args and look at the
output.
In order to properly enjoy it you will need two good old programs:
xterm and vi. Do the following: open an xterm with precisely 78 lines,
and use the tiny
font size for best results. Then vi (vim will also do) the output. Type
^F's
and enjoy the show ...
</p>
<p>The program solves (very very fast) a sliding block puzzle. There
are many
variants of such puzzles which are usually made from wood or plastic
pieces.
The start position can be recognized by looking at the program itself.
The
goal is to move the big piece (2 by 2) to the center top, which takes
179
steps in the shortest move sequence.
</p>
<p>Notice: the step count used by the program is longer than the
traditional
step count for such puzzles, as normally if the same piece is moved
twice in
a row it is counted as only one step, but here it is counted as two.
</p>
<p>The printout of the solution however is in a rather unorthodox form,
as can
be easily discerned. As you have probably suspected each of the steps
in the
solution printout is a C program which compiles to result in - surprise
surprise! - the original (well almost).
</p>
<p>Actually, This program is smarter than merely printing ITSELF in 180
different
layouts. It is self-improving, in that the programs it prints have
three
advantages over the original:
</p>
<p>1. Their layout is more precise (Notice the annoying \ at the 10'th
line of the original program which is actually a 'layout bug'
</p>
<p>2. Their binary output does not rely on the source file being in the
same directory, and will not dump core like the original if it doesn't.
&nbsp;:)
</p>
<p>3. They have much more comments (Not very helpful ones though).
</p>
<p>In addition as we all know bugs can creep on us in the most
unexpected of
places, and checking that indeed the output is composed of 180 legal C
programs by hand can be quite tedious, hence the program also include a
self-test mode. Just run it with the output file as command line
argument.
It will then try to compile each of the programs (printing the line
number
where the program starts) It will stop where any compilation fails and
the
culprit program would be in the file 'c.c'. The exit code of the
self-test
will be non-zero in that case. In case this entry wins, I do hope
nobody by
the name of 'c' also wins this year otherwise that part of the program
would have to be changed!
</p>
<p>Notice that the self-test does not try to run the result of the
compilations
but this can easily be done. try it and diff the output of any of the
180
results with the original output. Of course all 180 programs also
include
the self-test mode.
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Why_I_think_this_program_is_obfuscated."></a>
<h3>Why I think this program is obfuscated.</h3>
<ul>
  <li> Because its says so, and twice is better than once! </li>
</ul>
<ul>
  <li> All the usual suspects i.e.&nbsp;?: &amp;&amp; || , used to
compress code length in the noble tradition of this contest,
meaningless one character variable names, etc... </li>
</ul>
<ul>
  <li> The board representation is efficiently compressed hence
obfuscated, and the algorithm that is used to generate possible moves
is extremely efficient. </li>
</ul>
<p>In fact it can compute several moves in parallel on one processor!
Moreover
Only the most efficient bitwise logical operations, shift,and
subtraction
by one is used. No inefficient conditional tests and jumps are needed
in that part of the program.
</p>
<ul>
  <li> The single expression I'm most proud of, and would have
submitted to the </li>
</ul>
<p>category of 'best obfuscated short expression' if there was one is:
</p>
<pre>    s=s^(b=s&amp;s-1^s)<br></pre>
<p>Can you figure out what it does (very efficiently) and how it fits
in the scheme of things?
</p>
<ul>
  <li> IMHO the program is easier to understand before running cpp on
it. It is also shorter that way to be sure. </li>
</ul>
<ul>
  <li> It even takes care to obfuscate the comments in the output
programs. </li>
</ul>
<ul>
  <li> Having the output programs a bit different than the original is
more interesting. </li>
</ul>
<ul>
  <li> I have written an earlier version of the program about half a
year ago and when returning to it now I had to sweat quite a lot to
understand the f***ing mess I've made. </li>
</ul>
<p><br>
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Known_Bugs.2Fproblems.2Fwarnings.2Fportability_issues"></a>
<h3>Known Bugs/problems/warnings/portability issues</h3>
<p><br>
Some CPPs issue a warning about empty macro parameters.
</p>
<p>-pedantic informs me that 'ISO C' does not allow extra&nbsp;;
outside of a function,
and I to this I say ISO what&nbsp;???
</p>
<p>-Wall of course will suggest adding a lot of parenthesis, function
prototypes,
and remove some unnecessary expressions, and to this I say: if I listen
to
you where is my freedom to obfuscate in style?
</p>
<p>As mentioned earlier if you try to run the original program without
its source nearby it will dump core. </p>
<p>The program relies heavily on the ASCII coding system (have I seen
this comment before&nbsp;?). It also implicitly assumes that
sizeof(int) = sizeof(FILE *). On systems when that is not the case
expect a core dump...
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Challenges"></a>
<h3>Challenges</h3>
<p>What use are the&nbsp;;; for&nbsp;?
</p>
<p>Why do I use 126&amp; in the program? (except for the rather obvious
fact that it
serves as comment obfuscater).
</p>
<p>Why not write s^= instead of s=s^ In the expression I'm most proud
of&nbsp;?
</p>
<p>What is 40-(h&amp;62) doing&nbsp;?
</p>
<p>Use the program to solve for a different starting position. It is
not that
difficult. Notice however that if there are more than two empty spaces
the
outputs would not compile as the layout would not be sufficient to
contain
the program.
</p>
<p>Use the program to solve for board size different than 4*5. Thats a
bit more
tricky.
</p>
<div class="editsection" style="float: right; margin-left: 5px;"><br>
</div>
<a name="Hint_for_the_challenges"></a>
<h3>Hint for the challenges</h3>
<p>Just try to change the program, and use the self test to see what
happens ...
</p>
<br>
</div>
</div>
</div>
</div>
<!-- Served by infong241 in 0.36 secs. -->
</body>
</html>
